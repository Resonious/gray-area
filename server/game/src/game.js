// Generated by LiveScript 1.2.0
(function(){
  var ref$, each, map, filter, lines, keys, values, GameCore;
  ref$ = require('prelude-ls'), each = ref$.each, map = ref$.map, filter = ref$.filter, lines = ref$.lines, keys = ref$.keys, values = ref$.values;
  this.GameCore = GameCore = (function(){
    GameCore.displayName = 'GameCore';
    var prototype = GameCore.prototype, constructor = GameCore;
    function GameCore(game){
      this.game = game;
    }
    prototype.preload = function(){
      var asset, x$;
      asset = function(p){
        return "game/assets/" + p;
      };
      x$ = this.game.load;
      x$.tilemap('test-map', asset('maps/test-map.json'), null, Phaser.Tilemap.TILED_JSON);
      x$.image('test-tiles', asset('gfx/tiles/black-and-white.png'));
      x$.spritesheet('player-black', asset('gfx/player/black.png'), 84, 84);
      x$.spritesheet('player-white', asset('gfx/player/white.png'), 84, 84);
    };
    prototype.create = function(){
      (function(add, physics, world, camera){
        var x$, y$, this$ = this;
        console.log('lmfao!!!!');
        this.game.time.advancedTiming = true;
        physics.startSystem(Phaser.Physics.ARCADE);
        x$ = this.map = add.tilemap('test-map');
        x$.addTilesetImage('test-tiles');
        x$.setCollision(1, true);
        y$ = this.mapLayer = this.map.createLayer('First');
        y$.resizeWorld();
        this.player = new Player(this.game, 210, 210, 'black');
        add.existing(this.player);
        camera.follow(this.player);
        this.arrowKeys = this.game.input.keyboard.createCursorKeys();
        this.player.arrowKeys = function(){
          return this$.arrowKeys;
        };
      }.call(this, this.game.add, this.game.physics, this.game.world, this.game.camera));
    };
    prototype.update = function(){
      var x$;
      x$ = this.game.physics.arcade;
      x$.collide(this.player, this.mapLayer);
    };
    prototype.render = function(){
      this.game.debug.body(this.player);
    };
    return GameCore;
  }());
}).call(this);
