// Generated by LiveScript 1.2.0
(function(){
  var ref$, each, map, filter, first, head, lines, keys, values, GameCore, customAddFunctions;
  ref$ = require('prelude-ls'), each = ref$.each, map = ref$.map, filter = ref$.filter, first = ref$.first, head = ref$.head, lines = ref$.lines, keys = ref$.keys, values = ref$.values;
  this.GameCore = GameCore = (function(){
    GameCore.displayName = 'GameCore';
    var prototype = GameCore.prototype, constructor = GameCore;
    function GameCore(game){
      this.switchPlayers = bind$(this, 'switchPlayers', prototype);
      this.currentPlayer = bind$(this, 'currentPlayer', prototype);
      this.game = game;
    }
    prototype.preload = function(){
      var asset, x$;
      asset = function(p){
        return "game/assets/" + p;
      };
      x$ = this.game.load;
      x$.tilemap('test-map', asset('maps/test-map.json'), null, Phaser.Tilemap.TILED_JSON);
      x$.image('test-tiles', asset('gfx/tiles/black-and-white.png'));
      x$.image('black-and-white', asset('gfx/tiles/black-and-white-big.png'));
      x$.image('black', asset('gfx/tiles/black.png'));
      x$.image('white', asset('gfx/tiles/white.png'));
      x$.image('empty', asset('gfx/tiles/empty.png'));
      x$.image('indicator', asset('gfx/ui/indicator.png'));
      x$.image('locator', asset('gfx/ui/locator.png'));
      x$.audio('hit-ground-1', asset('sfx/hit-ground-1.ogg'));
      x$.audio('jump', asset('sfx/jump.ogg'));
      x$.audio('death', asset('sfx/death.ogg'));
      x$.audio('swap', asset('sfx/swap.ogg'));
      x$.audio('bgm', asset('music/gray.ogg'));
      x$.spritesheet('player-black', asset('gfx/player/black.png'), 84, 84);
      x$.spritesheet('player-white', asset('gfx/player/white.png'), 84, 84);
    };
    prototype.create = function(){
      customAddFunctions(this.game, this);
      (function(add, physics, world, camera){
        var x$, y$, z$, this$ = this;
        x$ = this.bgm = add.audio('bgm');
        x$.play('', 0, 0.5, true);
        this.game.stage.backgroundColor = '#FFFFFF';
        this.game.time.advancedTiming = true;
        physics.startSystem(Phaser.Physics.ARCADE);
        y$ = this.gui = add.group();
        y$.fixedToCamera = true;
        z$ = this.indicator = this.gui.create(700, 100, 'indicator');
        z$.anchor.setTo(0.5, 0.5);
        z$.angle = 180;
        this.swapSound = add.audio('swap');
        this.arrowKeys = this.game.input.keyboard.createCursorKeys();
        each(function(it){
          return this$.game.input.keyboard.addKey(it).onDown.add(this$.switchPlayers);
        }, [Phaser.Keyboard.TAB, Phaser.Keyboard.CONTROL]);
        this.loadLevel(Level.One);
      }.call(this, this.game.add, this.game.physics, this.game.world, this.game.camera));
    };
    prototype.loadLevel = function(level){
      var x$, this$ = this;
      if (this.currentLevel) {
        this.platforms.destroy();
        this.currentLevel.destroy();
      }
      if (this.locator) {
        this.locator.destroy();
      }
      this.platforms = this.game.add.group();
      this.currentLevel = this.game.add.existing(new level(this.game, this));
      x$ = this.locator = this.game.add.sprite(-100, -100, 'locator');
      x$.anchor.setTo(0.5, 0.5);
      each(function(it){
        return it.arrowKeys = this$.getPlayerKeys(it.color);
      })(
      [this.blackPlayer, this.whitePlayer]);
      this.game.camera.follow(this.blackPlayer);
      this.currentColor = 'black';
    };
    prototype.update = function(){
      (function(collide){
        if (this.blackPlayer) {
          collide(this.blackPlayer);
        }
        if (this.whitePlayer) {
          collide(this.whitePlayer);
        }
      }.call(this, PlatformCollision.collide(this.game.physics.arcade, this.currentLevel.platforms)));
      (function(player){
        if (player) {
          this.locator.x = player.x;
          this.locator.y = player.y - player.body.height;
        }
      }.call(this, this.currentPlayer()));
    };
    prototype.render = function(){
      'ass';
    };
    prototype.debugLog = function(){
      var key, value, this$ = this;
      console.log((function(){
        var results$ = [];
        for (key in this) {
          value = this[key];
          results$.push(key + ": " + value);
        }
        return results$;
      }.call(this)));
      console.log("====== PLATFORMS ========");
      console.log(this.currentLevel.platforms);
      each(function(platform){
        return console.log(platform.color + " " + platform.x + ", " + platform.y);
      })(
      this.currentLevel.platforms);
      console.log("====== CAMERA =======");
      console.log(this.game.camera.x + ", " + this.game.camera.y);
      return '=========== done ===========';
    };
    prototype.currentPlayer = function(){
      switch (this.currentColor) {
      case 'black':
        return this.blackPlayer;
      case 'white':
        return this.whitePlayer;
      }
    };
    prototype.playerColors = ['black', 'white'];
    prototype.switchPlayers = function(){
      var target, this$ = this;
      this.currentColor = head(filter(function(it){
        return it !== this$.currentColor;
      }, this.playerColors));
      this.game.camera.follow(this.currentPlayer());
      target = this.currentColor === 'black' ? 180 : 0;
      this.game.add.tween(this.indicator).to({
        angle: target
      }, 1000, Phaser.Easing.Quadratic.InOut, true);
      return this.swapSound.play('', 0, 1, false);
    };
    prototype.getPlayerKeys = function(color){
      var this$ = this;
      return function(){
        if (this$.currentColor === color) {
          return this$.arrowKeys;
        } else {
          return null;
        }
      };
    };
    return GameCore;
  }());
  customAddFunctions = function(game, core){
    each(function(color){
      return game.add[color] = {
        player: function(x, y){
          var plr;
          plr = game.add.existing(new Player(game, x, y, color));
          if (color === 'black') {
            return core.blackPlayer = plr;
          } else {
            return core.whitePlayer = plr;
          }
        },
        platform: function(x, y, w, h){
          return core.platforms.add(new Platform(game, x, y, w, h, color));
        }
      };
    })(
    ['black', 'white']);
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
