// Generated by LiveScript 1.2.0
(function(){
  var ref$, each, all, fold, foldr, filter, reject, map, empty, keys, values, abs, signum, join, Switch;
  ref$ = require('prelude-ls'), each = ref$.each, all = ref$.all, fold = ref$.fold, foldr = ref$.foldr, filter = ref$.filter, reject = ref$.reject, map = ref$.map, empty = ref$.empty, keys = ref$.keys, values = ref$.values, abs = ref$.abs, signum = ref$.signum, join = ref$.join;
  this.Switch = Switch = (function(superclass){
    var prototype = extend$((import$(Switch, superclass).displayName = 'Switch', Switch), superclass).prototype, constructor = Switch;
    prototype.wasTouchingUp = false;
    prototype.touchTimer = 0;
    function Switch(game, core, x, y, color){
      var x$, y$;
      Switch.superclass.call(this, game, x, y, "switch-" + color);
      this.core = core;
      this.color = color;
      game.physics.arcade.enable(this);
      this.anchor.setTo(0.5, 0.5);
      x$ = this.body;
      x$.immovable = true;
      x$.setSize(28, 3);
      y$ = this.animations;
      y$.add('up', [0], 0, true);
      y$.add('down', [1], 0, true);
    }
    prototype.update = function(){
      var delta;
      delta = this.game.time.physicsElapsed;
      if (this.touchTimer < 0) {
        if (this.body.touching.up && !this.wasTouchingUp) {
          this.wasTouchingUp = true;
          this.animations.play('down');
          if (this.onPress) {
            this.onPress();
          }
          this.touchTimer = 0.1;
        }
        if (this.wasTouchingUp && !this.body.touching.up) {
          this.wasTouchingUp = false;
          this.animations.play('up');
          if (this.onRelease) {
            this.onRelease();
          }
          this.touchTimer = 0.05;
        }
      } else {
        this.touchTimer -= delta;
      }
      if (this.customUpdate) {
        this.customUpdate(this);
      }
    };
    prototype.processPlayerCollide = function(player){
      return this.color === player.color;
    };
    return Switch;
  }(Phaser.Sprite));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
