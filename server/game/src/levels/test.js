// Generated by LiveScript 1.2.0
(function(){
  var Test;
  this.Level.Test = Test = (function(superclass){
    var prototype = extend$((import$(Test, superclass).displayName = 'Test', Test), superclass).prototype, constructor = Test;
    prototype.init = function(level){
      var x$, y$, z$, z1$;
      x$ = level;
      y$ = x$.platform;
      y$.black(301, 260, 469, 187);
      y$.black(0, 347, 305, 100);
      z$ = x$['switch'];
      z$.black(467, 253, this.theSwitch('black'));
      z$.white(409, 440, this.theSwitch('white'));
      z1$ = x$.player;
      z1$.black(200, 100);
      z1$.white(490, 313);
      x$.gray(0, 0, 50, 50, Level.Test);
      return x$;
    };
    prototype.theSwitch = curry$(function(color, self){
      return self.onPress = function(){
        var plr;
        plr = color === 'black' ? 'whitePlayer' : 'blackPlayer';
        return self.core[plr].body.velocity.y = -500;
      };
    });
    function Test(){
      Test.superclass.apply(this, arguments);
    }
    return Test;
  }(Level));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
