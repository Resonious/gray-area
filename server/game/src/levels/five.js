// Generated by LiveScript 1.2.0
(function(){
  var Five;
  this.Level.Five = Five = (function(superclass){
    var prototype = extend$((import$(Five, superclass).displayName = 'Five', Five), superclass).prototype, constructor = Five;
    prototype.levelWidth = 1000;
    prototype.levelHeight = 1000;
    prototype.init = function(level){
      var x$, y$, z$;
      x$ = level;
      y$ = x$.platform;
      y$.black(0, 800, 1000, 90);
      y$.black(0, 650, 1000, 90);
      y$.black(0, 500, 1000, 90);
      y$.black(0, 350, 1000, 90);
      y$.black(0, 200, 1000, 90);
      y$.black(773, 201, 109, 207, this.mover(0, 0, 0, 950, 200));
      y$.black(530, 202, 109, 207, this.mover(0, 0, 200, 1000, 200));
      y$.black(295, 203, 109, 207, this.mover(0, 0, 100, 900, 200));
      y$.black(46, 196, 109, 207, this.mover(20, 800, 100, 975, 200));
      y$.black(15, 782, 218, 189, this.mover(50, 900, 8, 1000, 200));
      x$.danger(0, 976, 1000, 24);
      z$ = x$.player;
      z$.black(450, 50);
      z$.white(718, 860);
      x$.gray(488, 102, Level.ThankYou);
      return x$;
    };
    prototype.mover = curry$((function(minX, maxX, minY, maxY, speed, platform){
      var body, processY, processX;
      body = platform.body;
      processY = function(){
        if (minY === maxY) {
          return;
        }
        if (body.velocity.y === 0) {
          body.velocity.y = speed;
        }
        if (body.y <= minY) {
          return body.velocity.y = speed;
        } else if (body.y >= maxY) {
          return body.velocity.y = -speed;
        }
      };
      processX = function(){
        if (minX === maxX) {
          return;
        }
        if (body.velocity.x === 0) {
          body.velocity.x = speed;
        }
        if (body.x <= minX) {
          return body.velocity.x = speed;
        } else if (body.x >= maxX) {
          return body.velocity.x = -speed;
        }
      };
      processX();
      return processY();
    }), true);
    function Five(){
      this.mover = bind$(this, 'mover', prototype);
      Five.superclass.apply(this, arguments);
    }
    return Five;
  }(Level));
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
