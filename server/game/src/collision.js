// Generated by LiveScript 1.2.0
(function(){
  var ref$, each, map, filter, lines, keys, values, abs, signum, join;
  ref$ = require('prelude-ls'), each = ref$.each, map = ref$.map, filter = ref$.filter, lines = ref$.lines, keys = ref$.keys, values = ref$.values, abs = ref$.abs, signum = ref$.signum, join = ref$.join;
  this.PlatformCollision = {
    collide: curry$(function(physics, platforms, player){
      player.overlappingPlatforms = [];
      return platforms.each(function(platform){
        physics.collide(player, platform.inside, null, PlatformCollision.processInside(player.color, platform));
        return physics.collide(player, platform.edges, null, PlatformCollision.processEdge(player.color, platform));
      });
    }),
    processInside: function(color, platform){
      switch (false) {
      case !(!color || !platform.color):
        throw "Something went wrong with platform color!";
      case color !== platform.color:
        return null;
      default:
        return function(player, platformBody){
          player.overlappingPlatforms.push(platform);
          return false;
        };
      }
    },
    processEdge: function(color, platform){
      switch (false) {
      case !(!color || !platform.color):
        throw "Something went wrong with platform color!";
      case color !== platform.color:
        return null;
      default:
        return function(player, platformEdge){
          return true;
        };
      }
    }
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
